import torch
import torchvision
import numpy
import time
import os
import csv
import random

import ultralytics
from ultralytics import YOLO
from ultralytics import YOLOv10
import cv2

"""

Change constant 'ACTION' to select what you want to do.
The following is a list of valid values for 'ACTION' and their purpose:


ACTION = 'VIDEO'
Use Case: Opens your webcam/device camera as the source of the input. Will run indefinitely until the code stops via
          keyboard interrupt (press key 'q') or forced stop from the IDE or device.


ACTION = 'TRAIN'
Use Case: Will train the model. You can customize the default model (where the initial weights are imported from)
          below. Its 'yolov10n.pt' by default. You can change the dataset directory as well. Please export your
          custom dataset in YOLOv9 format if you were to change it.


ACTION = 'STATIC_TEST'
Use Case: Will test your finetuned YOLOv10 model on a image from the 'test' set. It will then display a image
          of the result generated by the model. Press 'q' or manually kill the code to close the display.

"""

ACTION = 'STATIC_TEST'
# The action that the code will execute.

DEFAULT_MODEL = 'pretrained_models/yolov10x.pt'                                           # The baseline model that the code will finetune upon.
FINETUNED_MODEL = 'runs/detect/train/weights/best.pt'                                     # The finetuned model's (if applicable) path.
OS_DATASET_DIR = "C:\\Users\\Student\\PycharmProjects\\ai_image_detect\\pothole_dataset"  # The OS directory for the dataset.
PY_DATASET_DIR = 'pothole_dataset'                                                        # The Python (regular) path for the dataset directory.

VIDEO_MODEL = FINETUNED_MODEL
# The model that will be used in live feed (webcam / device camera video).


# The following function will open your webcam and display a live feed of the model's output based on the video source.
def run_video(model):
    cap = cv2.VideoCapture(0)  # Selects device
    while True:
        ret, frame = cap.read()  # Read frame from source
        if not ret:  # Whether webcam is available
            break
        results = model.predict(source=frame, stream=True)  # Inputs source to model
        for r in results:
            annotated_frame = r.plot()  # Layer annotation on original frame
            cv2.imshow("YOLOv10 Inference", annotated_frame)  # Display the annotated frame
        if cv2.waitKey(1) & 0xFF == ord('q'):  # Quit display upon 'q' key.
            break
    cap.release()            # Stops webcam feed
    cv2.destroyAllWindows()  # Closes display


# The following function trains the input model based on a pretrained model.
def run_training(base_model):
    if __name__ == '__main__':  # Weird error happens if this line doesn't exist. Something to do with threading.
        model = YOLOv10(base_model)  # Start with a base model
        model.train(data="pothole_dataset/data.yaml", epochs=512, batch=16, imgsz=640)  # Train model based on dataset.
        model.export()  # Export model to a .pt file. (Can be changed)


# The following function runs a static test on the finetuned model and displays the output.
def run_static_test(model):
    file = random.choice(os.listdir("C:\\Users\\Student\\PycharmProjects\\ai_image_detect\\pothole_dataset\\test\\images"))  # Select random file from test set.
    path = f'pothole_dataset/test/images/{file}'
    print(path)
    results = model.predict(source=path, show=True)  # Display model
    while True:
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break
    cv2.destroyAllWindows()


# The main function. Not much to explain here.
def main():
    if ACTION == 'VIDEO':
        run_video(YOLOv10(VIDEO_MODEL))
    elif ACTION == 'TRAIN':
        run_training(DEFAULT_MODEL)
    elif ACTION == 'STATIC_TEST':
        run_static_test(YOLOv10(FINETUNED_MODEL))
    else:
        print()
        print("(!) Invalid Action!")
        print()


if __name__ == '__main__':
    main()
